import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.panda.asam"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions"
                arguments "-DANDROID_STL=c++_shared"
                abiFilters 'arm64-v8a', 'armeabi-v7a'//, 'x86', 'x86_64'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            externalNativeBuild {
                cmake {
                    arguments "-DUSEASAN=OFF"
                }
            }
        }

        debug {
            jniDebuggable true
            externalNativeBuild {
                cmake {
                    arguments "-DUSEASAN=ON"
                }
            }

            sourceSets {
                main {
                    jniLibs {
                        srcDir {
                            "./build/asan/lib/"
                        }
                    }
                    resources {
                        srcDir {
                            "./build/asan/res/"
                        }
                    }
                }
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

task deleteAsan(type: Delete) {
    delete project.name + "/build/asan/"
}

clean.dependsOn(deleteAsan)

//afterEvaluate { writeAsanSourceToBuild() }

/**
 * 将ndk下的资源拷贝到build下，最终打包到apk中
 */
def writeAsanSourceToBuild() {
    def splitSourcePath = android.ndkDirectory.getAbsolutePath() + '/toolchains/llvm/prebuilt/darwin-x86_64/lib64/clang/'
    def sourcePath = splitSourcePath + new File(splitSourcePath).list(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            // 正则取类似7.0.2这样结构的文件夹
            return Pattern.matches("^(\\d+.)+(\\d+)\$", name)
        }
    })[0].toString() + '/lib/linux/'

    for (String abi : android.defaultConfig.externalNativeBuild.cmake.abiFilters) {
        if (abi.startsWith('com.android')) continue
        def destResPath = new File(project.name + "/build/asan/res/lib/" + abi)
        def destLibPath = new File(project.name + "/build/asan/lib/" + abi)
        destLibPath.mkdirs()
        destResPath.mkdirs()
        def wrapFile = new File(destResPath, "wrap.sh")
        if (abi == "armeabi" || abi == "armeabi-v7a") abi = "arm"
        if (abi == "arm64-v8a") abi = "aarch64"
        // 动态写wrap.sh文件，内容是固定的
        wrapFile.withWriter { writer ->
            writer.write('#!/system/bin/sh\n')
            writer.write('HERE="$(cd "$(dirname "$0")" && pwd)"\n')
            writer.write('export ASAN_OPTIONS=log_to_syslog=false,allow_user_segv_handler=1\n')
            writer.write('export ASAN_ACTIVATION_OPTIONS=include_if_exists=/data/local/tmp/asan.options.b\n')
            writer.write("export LD_PRELOAD=\$HERE/libclang_rt.asan-${abi}-android.so\n")
            writer.write('\$@\n')
        }
        // 拷贝ndk下特定的so文件到build中
        File[] files = new File(sourcePath).listFiles(new FileFilter() {
            @Override
            boolean accept(File pathname) {
                println(pathname)
                return pathname.name.startsWith('libclang_rt') && pathname.name.endsWith('so')
            }
        })
        for (File file : files) {
            String needSoName = "libclang_rt.asan-${abi}-android.so"
            if (needSoName.equalsIgnoreCase(file.getName())) {
                InputStream ins = new FileInputStream(file)
                OutputStream out = new FileOutputStream(new File(destLibPath, file.getName()))
                byte[] buf = new byte[1024]
                int len
                while ((len = ins.read(buf)) > 0) {
                    out.write(buf, 0, len)
                }
                ins.close()
                out.close()
            }
        }
    }
}
